import { css2rgb } from '../src/io/css/css2rgb';

describe('css2rgb()', () => {
  const tests = [
    ['rgb(0 0 0)', [0, 0, 0, 1]],
    ['rgb(0,   0,0)', [0, 0, 0, 1]],
    ['rgb(100% 100% 100%)', [255, 255, 255, 1]],
    ['rgb(100%,100%,100%)', [255, 255, 255, 1]],
    ['rgba(255 0 0 0.5)', [255, 0, 0, 0.5]],
    ['rgba(255,0,0,0.5)', [255, 0, 0, 0.5]],
    ['RGBA(255, 0, 0  , 0.5)', [255, 0, 0, 0.5]],
    ['rgba(0%,100%,0%,.5)', [0, 255, 0, 0.5]],
    ['rgba(0% 100% 0% 0.5)', [0, 255, 0, 0.5]],
    ['hsl(240 100% 50%)', [0, 0, 255, 1]],
    ['hsl(240,  100%,50%)', [0, 0, 255, 1]],
    ['hsl(60 ,100%, 50%)', [255, 255, 0, 1]],
    ['hsla(180 100% 50% .75)', [0, 255, 255, 0.75]],
    ['hsla(180,100%,50%,1)', [0, 255, 255, 1]],
    ['hsla(300,100%,50%,.25)', [255, 0, 255, 0.25]],
    ['blanchedalmond', [255, 235, 205, 1]],
    ['blue', [0, 0, 255, 1]],
    ['BlueViolet', [138, 43, 226, 1]],
    ['BROWN', [165, 42, 42, 1]],
  ];

  test.each(tests)('css2rgb(%s) = %j', (input, expected) => {
    expect(css2rgb(input)).toStrictEqual(expected);
  });

  const invalid = [
    '',
    'rgb(0,0',
    'hsl(240,,100%, 50%)',
    'invalid(100%,100%,100%)',
    'RGBA (255, 0, 0  , 0.5)',
    'unknown',
  ];

  test.each(invalid)('css2rgb(%s) throws', input => {
    expect(() => css2rgb(input)).toThrow();
  });
});
